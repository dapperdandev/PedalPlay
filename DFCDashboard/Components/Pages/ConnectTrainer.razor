@page "/connect-trainer"
@using Plugin.BLE.Abstractions.Contracts
@using Plugin.BLE.Abstractions.EventArgs
@using Plugin.BLE.Abstractions.Extensions
@using Plugin.BLE.Abstractions
@inject IBluetoothLE BluetoothLE
@inject IAdapter Adapter
@inject IJSRuntime JSRuntime

<style>
    .device-list {
        max-height: 400px;
        overflow-y: auto;
        margin: 20px 0;
    }
    .status-message {
        margin: 10px 0;
        padding: 10px;
        border-radius: 4px;
    }
    .status-info {
        background-color: #e7f5ff;
        border-left: 4px solid #4dabf7;
    }
    .status-error {
        background-color: #fff5f5;
        border-left: 4px solid #ff6b6b;
    }
    .status-success {
        background-color: #ebfbee;
        border-left: 4px solid #40c057;
    }
    
    /* Spinner animation */
    .spin {
        animation: spin 1s linear infinite;
    }
    
    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
</style>

@{
    string GetStatusClass()
    {
        if (_statusMessage.Contains("error", StringComparison.OrdinalIgnoreCase))
            return "status-error";
        if (_statusMessage.Contains("success", StringComparison.OrdinalIgnoreCase) || _connectedDevice != null)
            return "status-success";
        return "status-info";
    }
}


<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h1 class="h5 mb-0">Connect to DFC Device</h1>
        </div>
        <div class="card-body">
            <div class="d-flex align-items-center mb-3">
                <button class="btn btn-primary me-2" @onclick="ScanForDevices" disabled="@_isScanning">
                    <i class="bi @(_isScanning ? "bi-arrow-repeat spin" : "bi-bluetooth") me-1"></i>
                    @(_isScanning ? "Scanning..." : "Scan for Devices")
                </button>
                
                @if (BluetoothLE?.IsOn != true)
                {
                    <div class="alert alert-warning mb-0 py-1">
                        <i class="bi bi-exclamation-triangle-fill me-1"></i> Bluetooth is turned off
                    </div>
                }
            </div>

            @if (!string.IsNullOrEmpty(_statusMessage))
            {
                <div class="status-message @GetStatusClass()">
                    <i class="bi @(_statusMessage.Contains("error") ? "bi-exclamation-triangle-fill" : "bi-info-circle-fill") me-2"></i>
                    @_statusMessage
                </div>
            }

            @if (_devices.Any())
            {
                <div class="device-list">
                    <div class="list-group">
                        @foreach (var device in _devices)
                        {
                            <button type="button" 
                                    class="list-group-item list-group-item-action d-flex justify-content-between align-items-center"
                                    @onclick="() => ConnectToDevice(device)">
                                <div>
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-bluetooth me-2"></i>
                                        <div>
                                            <strong>@(string.IsNullOrEmpty(device.Name) ? "Unknown Device" : device.Name)</strong>
                                            <div class="text-muted small">@device.Id</div>
                                            <div class="small">RSSI: @(device.Rssi) dBm</div>
                                        </div>
                                    </div>
                                </div>
                                @if (_connectedDevice?.Id == device.Id)
                                {
                                    <span class="badge bg-success rounded-pill">
                                        <i class="bi bi-check-circle-fill me-1"></i>Connected
                                    </span>
                                }
                                else if (device.IsConnectable)
                                {
                                    <span class="badge bg-primary rounded-pill">Tap to connect</span>
                                }
                            </button>
                        }
                    </div>
                </div>
            }
            else if (_isScanning)
            {
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Scanning...</span>
                    </div>
                    <p class="mt-2">Searching for DFC devices...</p>
                </div>
            }
            else if (_hasScanned && !_devices.Any())
            {
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    No DFC devices found. Please ensure your device is:
                    <ul class="mb-0 mt-2">
                        <li>Powered on</li>
                        <li>In range (within 10 meters)</li>
                        <li>In pairing/discoverable mode</li>
                    </ul>
                </div>
            }

            @if (_connectedDevice != null)
            {
                <div class="card mt-3 border-success">
                    <div class="card-header bg-success text-white">
                        <i class="bi bi-bluetooth me-2"></i>Connected Device
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h5 class="card-title">@_connectedDevice.Name</h5>
                                <div class="text-muted small mb-2">ID: @_connectedDevice.Id</div>
                                <div class="d-flex align-items-center">
                                    <span class="badge @(_connectedDevice.State == DeviceState.Connected ? "bg-success" : "bg-warning") me-2">
                                        @_connectedDevice.State
                                    </span>
                                    <span class="text-muted small">
                                        RSSI: @(_connectedDevice.Rssi) dBm
                                    </span>
                                </div>
                            </div>
                            <button class="btn btn-outline-danger" @onclick="DisconnectDevice">
                                <i class="bi bi-x-circle-fill me-1"></i>Disconnect
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<IDevice> _devices = new();
    private bool _isScanning = false;
    private bool _hasScanned = false;
    private string _statusMessage = string.Empty;
    private IDevice? _connectedDevice = null;
    private CancellationTokenSource? _scanCts;
    private bool _disposed = false;

    protected override void OnInitialized()
    {
        Adapter.DeviceDiscovered += OnDeviceDiscovered;
        Adapter.DeviceConnected += OnDeviceConnected;
        Adapter.DeviceDisconnected += OnDeviceDisconnected;
        Adapter.DeviceConnectionError += OnDeviceConnectionError;
    }

    private async Task ScanForDevices()
    {
        if (_isScanning || _disposed)
            return;

        try
        {
            // Cancel any existing scan
            _scanCts?.Cancel();
            _scanCts = new CancellationTokenSource();
            var cancellationToken = _scanCts.Token;

            _isScanning = true;
            _devices.Clear();
            _hasScanned = true;
            _statusMessage = "Scanning for DFC devices...";
            StateHasChanged();

            // Ensure Bluetooth is on
            if (!BluetoothLE.IsOn)
            {
                _statusMessage = "Bluetooth is turned off. Please enable Bluetooth and try again.";
                return;
            }

            // Clear any existing devices
            _devices.Clear();
            StateHasChanged();

            // Start scanning with a timeout
            Adapter.ScanTimeout = 10000; // 10 seconds
            Adapter.ScanMode = ScanMode.LowLatency;

            // Start scanning
            await Adapter.StartScanningForDevicesAsync(cancellationToken: cancellationToken);

            if (!_devices.Any() && !cancellationToken.IsCancellationRequested)
            {
                _statusMessage = "No DFC devices found. Make sure your device is powered on and in range.";
            }
        }
        catch (OperationCanceledException)
        {
            // Scan was cancelled, no need to show an error
            _statusMessage = "Scan cancelled";
        }
        catch (Exception ex)
        {
            _statusMessage = $"Error scanning for devices: {ex.Message}";
            Console.WriteLine($"Bluetooth scan error: {ex}");
        }
        finally
        {
            if (!_disposed)
            {
                _isScanning = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private void OnDeviceDiscovered(object? sender, DeviceEventArgs e)
    {
        if (_disposed || e.Device == null) return;
        
        // Only add if not already in the list
        if (!_devices.Any(d => d.Id == e.Device.Id))
        {
            _devices.Add(e.Device);
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task ConnectToDevice(IDevice device)
    {
        if (_disposed || device == null)
            return;

        try
        {
            _statusMessage = $"Connecting to {device.Name}...";
            await InvokeAsync(StateHasChanged);

            // Cancel any ongoing scan
            _scanCts?.Cancel();

            var connectParameters = new ConnectParameters(
                autoConnect: false,
                forceBleTransport: true);

            await Adapter.ConnectToDeviceAsync(device, connectParameters);
            
            // The OnDeviceConnected event will handle the rest
        }
        catch (Exception ex)
        {
            _statusMessage = $"Failed to connect to {device.Name}: {ex.Message}";
            await InvokeAsync(StateHasChanged);
            Console.WriteLine($"Connection error: {ex}");
        }
    }

    private async Task DisconnectDevice()
    {
        if (_disposed || _connectedDevice == null)
            return;

        try
        {
            var deviceToDisconnect = _connectedDevice;
            _connectedDevice = null;
            
            await Adapter.DisconnectDeviceAsync(deviceToDisconnect);
            _statusMessage = $"Disconnected from {deviceToDisconnect.Name}";
        }
        catch (Exception ex)
        {
            _statusMessage = $"Error disconnecting: {ex.Message}";
            Console.WriteLine($"Disconnection error: {ex}");
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnDeviceConnected(object? sender, DeviceEventArgs e)
    {
        if (_disposed || e.Device == null)
            return;

        try
        {
            _connectedDevice = e.Device;
            _statusMessage = $"Connected to {e.Device.Name}";
            await InvokeAsync(StateHasChanged);
            
            // Here you can add code to discover services/characteristics
            // For DFC device, you might want to look for specific services
            // var services = await e.Device.GetServicesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnDeviceConnected: {ex}");
        }
    }

    private async void OnDeviceDisconnected(object? sender, DeviceEventArgs e)
    {
        if (_disposed || e.Device == null)
            return;

        try
        {
            bool wasConnected = _connectedDevice?.Id == e.Device.Id;
            
            if (wasConnected)
            {
                _connectedDevice = null;
                _statusMessage = $"Disconnected from {e.Device.Name}";
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnDeviceDisconnected: {ex}");
        }
    }

    private async void OnDeviceConnectionError(object? sender, DeviceErrorEventArgs e)
    {
        if (_disposed)
            return;

        try
        {
            _statusMessage = $"Connection error: {e.ErrorMessage}";
            _connectedDevice = null;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnDeviceConnectionError: {ex}");
        }
    }

    public async void Dispose()
    {
        if (_disposed) return;
        _disposed = true;

        try
        {
            // Cancel any ongoing scan
            _scanCts?.Cancel();
            
            // Disconnect if connected
            if (_connectedDevice != null)
            {
                await Adapter.DisconnectDeviceAsync(_connectedDevice);
            }
            
            // Unsubscribe from events
            Adapter.DeviceDiscovered -= OnDeviceDiscovered;
            Adapter.DeviceConnected -= OnDeviceConnected;
            Adapter.DeviceDisconnected -= OnDeviceDisconnected;
            Adapter.DeviceConnectionError -= OnDeviceConnectionError;
            
            _scanCts?.Dispose();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during cleanup: {ex}");
        }
    }
}
