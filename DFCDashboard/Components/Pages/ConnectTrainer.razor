@page "/connect-trainer"
@using Plugin.BLE.Abstractions.Contracts
@using Plugin.BLE.Abstractions.EventArgs
@using Plugin.BLE.Abstractions.Extensions
@using Plugin.BLE.Abstractions
@using DFCDashboard.Services
@inject IBluetoothLE BluetoothLE
@inject IAdapter Adapter
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject CyclingDataService CyclingData

<div class="start-screen">
    <div class="connection-panel">
        <div class="d-flex justify-content-center">
            <button class="btn start-button mb-4" @onclick="ScanForDevices" disabled="@_isScanning">
                <i class="bi @(_isScanning ? "bi-arrow-repeat spin" : "bi-bluetooth") me-2"></i>
                @(_isScanning ? "Scanning..." : "Scan for Devices")
            </button>
        </div>

        @if (!string.IsNullOrEmpty(_statusMessage))
        {
            <div class="status-box @(_statusMessage.Contains("error", StringComparison.OrdinalIgnoreCase) ? "status-error" : "status-info")">
                <i class="bi @(_statusMessage.Contains("error") ? "bi-exclamation-triangle-fill" : "bi-info-circle-fill") me-2"></i>
                @_statusMessage
            </div>
        }

        @if (_devices.Any())
        {
            <div class="device-list">
                @foreach (var device in _devices)
                {
                    <button class="device-button" @onclick="() => ConnectToDevice(device)">
                        <div class="device-info">
                            <i class="bi bi-bluetooth device-icon"></i>
                            <div class="device-details">
                                <span class="device-name">@(string.IsNullOrEmpty(device.Name) ? "Unknown Device" : device.Name)</span>
                                <span class="device-id">@device.Id</span>
                                <span class="device-rssi">Signal: @(device.Rssi) dBm</span>
                            </div>
                        </div>
                        @if (_connectedDevice?.Id == device.Id)
                        {
                            <div class="device-status connected">
                                <i class="bi bi-check-circle-fill"></i>
                                Connected
                            </div>
                        }
                    </button>
                }
            </div>
        }
        else if (_isScanning)
        {
            <div class="scanning-indicator">
                <i class="bi bi-arrow-repeat spin scanning-icon"></i>
                <span>Searching for devices...</span>
            </div>
        }
        else if (_hasScanned && !_devices.Any())
        {
            <div class="no-devices-message">
                <i class="bi bi-exclamation-triangle-fill"></i>
                <p>No devices found</p>
                <ul>
                    <li>Check if device is powered on</li>
                    <li>Ensure device is within range</li>
                    <li>Put device in pairing mode</li>
                </ul>
            </div>
        }

        @if (_connectedDevice != null)
        {
            <div class="connected-device-panel">
                <div class="connected-device-info">
                    <h2>Connected to @_connectedDevice.Name</h2>
                    <button class="btn start-button disconnect-button" @onclick="DisconnectDevice">
                        <i class="bi bi-x-circle-fill me-2"></i>Disconnect
                    </button>
                </div>
            </div>
        }

        <div class="mt-4 text-center">
            <a href="/" class="btn start-button">
                <i class="bi bi-arrow-left me-2"></i>Back to Dashboard
            </a>
        </div>
    </div>
</div>

<style>
    .connection-panel {
        background: rgba(0, 0, 0, 0.4);
        padding: 2rem;
        border-radius: 20px;
        backdrop-filter: blur(10px);
        max-width: 800px;
        width: 90%;
    }

    .btn.start-button {
        min-width: 200px;
    }

    .device-list {
        max-height: 400px;
        overflow-y: auto;
        margin: 20px 0;
        padding: 10px;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 15px;
    }

    .device-button {
        width: 100%;
        background: rgba(255, 255, 255, 0.1);
        border: none;
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 0.5rem;
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: all 0.3s ease;
    }

    .device-button:hover {
        background: rgba(13, 110, 253, 0.3);
        transform: translateY(-2px);
    }

    .device-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .device-icon {
        font-size: 1.5rem;
        color: #0dcaf0;
    }

    .device-details {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        text-align: left;
    }

    .device-name {
        font-size: 1.1rem;
        font-weight: bold;
    }

    .device-id {
        font-size: 0.8rem;
        opacity: 0.7;
    }

    .device-rssi {
        font-size: 0.8rem;
        color: #0dcaf0;
    }

    .device-status {
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        min-width: 120px;
        justify-content: center;
    }

    .device-status.connected {
        background: rgba(40, 167, 69, 0.3);
        color: #98ff98;
    }

    .status-box {
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        background: rgba(0, 0, 0, 0.3);
    }

    .status-error {
        border-left: 4px solid #dc3545;
    }

    .status-info {
        border-left: 4px solid #0dcaf0;
    }

    .scanning-indicator {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
        padding: 2rem;
    }

    .scanning-icon {
        font-size: 2rem;
        color: #0dcaf0;
    }

    .no-devices-message {
        text-align: center;
        padding: 2rem;
        color: #ffc107;
    }

    .no-devices-message ul {
        text-align: left;
        margin-top: 1rem;
        color: #adb5bd;
    }

    .connected-device-panel {
        background: rgba(40, 167, 69, 0.2);
        border-radius: 15px;
        padding: 1.5rem;
        margin-top: 2rem;
    }

    .connected-device-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1rem;
    }

    .connected-device-info h2 {
        margin: 0;
        font-size: 1.5rem;
        color: #98ff98;
    }

    .disconnect-button {
        background: rgba(220, 53, 69, 0.3) !important;
        color: #ff6b6b !important;
    }

    .disconnect-button:hover {
        background: rgba(220, 53, 69, 0.5) !important;
    }

    /* Spinner animation */
    .spin {
        animation: spin 1s linear infinite;
    }
    
    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
</style>

@code {
    private List<IDevice> _devices = new();
    private bool _isScanning = false;
    private bool _hasScanned = false;
    private string _statusMessage = string.Empty;
    private IDevice? _connectedDevice = null;
    private CancellationTokenSource? _scanCts;
    private bool _disposed = false;

    protected override void OnInitialized()
    {
        Adapter.DeviceDiscovered += OnDeviceDiscovered;
        Adapter.DeviceConnected += OnDeviceConnected;
        Adapter.DeviceDisconnected += OnDeviceDisconnected;
        Adapter.DeviceConnectionError += OnDeviceConnectionError;
    }

    private async Task ScanForDevices()
    {
        if (_isScanning || _disposed)
            return;

        try
        {
            // Cancel any existing scan
            _scanCts?.Cancel();
            _scanCts = new CancellationTokenSource();
            var cancellationToken = _scanCts.Token;

            _isScanning = true;
            _devices.Clear();
            _hasScanned = true;
            _statusMessage = "Scanning for DFC devices...";
            StateHasChanged();

            // Ensure Bluetooth is on
            if (!BluetoothLE.IsOn)
            {
                _statusMessage = "Bluetooth is turned off. Please enable Bluetooth and try again.";
                return;
            }

            // Clear any existing devices
            _devices.Clear();
            StateHasChanged();

            // Start scanning with a timeout
            Adapter.ScanTimeout = 10000; // 10 seconds
            Adapter.ScanMode = ScanMode.LowLatency;

            // Start scanning
            await Adapter.StartScanningForDevicesAsync(cancellationToken: cancellationToken);

            if (!_devices.Any() && !cancellationToken.IsCancellationRequested)
            {
                _statusMessage = "No DFC devices found. Make sure your device is powered on and in range.";
            }
        }
        catch (OperationCanceledException)
        {
            // Scan was cancelled, no need to show an error
            _statusMessage = "Scan cancelled";
        }
        catch (Exception ex)
        {
            _statusMessage = $"Error scanning for devices: {ex.Message}";
            Console.WriteLine($"Bluetooth scan error: {ex}");
        }
        finally
        {
            if (!_disposed)
            {
                _isScanning = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private void OnDeviceDiscovered(object? sender, DeviceEventArgs e)
    {
        if (_disposed || e.Device == null) return;
        
        // Only add if not already in the list
        if (!_devices.Any(d => d.Id == e.Device.Id))
        {
            _devices.Add(e.Device);
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task ConnectToDevice(IDevice device)
    {
        if (_disposed || device == null)
            return;

        try
        {
            _statusMessage = $"Connecting to {device.Name}...";
            await InvokeAsync(StateHasChanged);

            // Cancel any ongoing scan
            _scanCts?.Cancel();

            // Connect using our CyclingDataService
            await CyclingData.ConnectToDevice(device);
            _connectedDevice = device;
            _statusMessage = $"Successfully connected to {device.Name}";
            
            // Navigate to home page after successful connection
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            _statusMessage = $"Failed to connect to {device.Name}: {ex.Message}";
            Console.WriteLine($"Connection error: {ex}");
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task DisconnectDevice()
    {
        if (_disposed || _connectedDevice == null)
            return;

        try
        {
            var deviceToDisconnect = _connectedDevice;
            _connectedDevice = null;
            
            // Disconnect using our CyclingDataService
            await CyclingData.Disconnect();
            _statusMessage = $"Disconnected from {deviceToDisconnect.Name}";
        }
        catch (Exception ex)
        {
            _statusMessage = $"Error disconnecting: {ex.Message}";
            Console.WriteLine($"Disconnection error: {ex}");
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnDeviceConnected(object? sender, DeviceEventArgs e)
    {
        if (_disposed || e.Device == null)
            return;

        try
        {
            _connectedDevice = e.Device;
            _statusMessage = $"Connected to {e.Device.Name}";
            await InvokeAsync(StateHasChanged);
            
            // Here you can add code to discover services/characteristics
            // For DFC device, you might want to look for specific services
            // var services = await e.Device.GetServicesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnDeviceConnected: {ex}");
        }
    }

    private async void OnDeviceDisconnected(object? sender, DeviceEventArgs e)
    {
        if (_disposed || e.Device == null)
            return;

        try
        {
            bool wasConnected = _connectedDevice?.Id == e.Device.Id;
            
            if (wasConnected)
            {
                _connectedDevice = null;
                _statusMessage = $"Disconnected from {e.Device.Name}";
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnDeviceDisconnected: {ex}");
        }
    }

    private async void OnDeviceConnectionError(object? sender, DeviceErrorEventArgs e)
    {
        if (_disposed)
            return;

        try
        {
            _statusMessage = $"Connection error: {e.ErrorMessage}";
            _connectedDevice = null;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnDeviceConnectionError: {ex}");
        }
    }

    public async void Dispose()
    {
        if (_disposed) return;
        _disposed = true;

        try
        {
            // Cancel any ongoing scan
            _scanCts?.Cancel();
            
            // Disconnect if connected
            if (_connectedDevice != null)
            {
                await Adapter.DisconnectDeviceAsync(_connectedDevice);
            }
            
            // Unsubscribe from events
            Adapter.DeviceDiscovered -= OnDeviceDiscovered;
            Adapter.DeviceConnected -= OnDeviceConnected;
            Adapter.DeviceDisconnected -= OnDeviceDisconnected;
            Adapter.DeviceConnectionError -= OnDeviceConnectionError;
            
            _scanCts?.Dispose();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during cleanup: {ex}");
        }
    }
}
