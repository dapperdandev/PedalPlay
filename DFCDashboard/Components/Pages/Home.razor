@page "/"
@using Plugin.BLE.Abstractions.Contracts
@using DFCDashboard.Components.Layout
@inject DFCDashboard.Services.CyclingDataService CyclingData
@inject NavigationManager Navigation
@implements IDisposable

<div class="start-screen">
    <ConnectionStatus />
    
    @if (CyclingData.IsConnected)
    {
        <div class="metric-display">
            <div class="metric-box">
                <div class="metric-value">@CyclingData.Power</div>
                <div class="metric-label">Watts</div>
            </div>
            <div class="metric-box">
                <div class="metric-value">@CyclingData.Cadence</div>
                <div class="metric-label">RPM</div>
            </div>
        </div>
    }
    else
    {
        <h1 class="game-title">DFC Dashboard</h1>
        <button class="btn start-button" @onclick="StartTraining">
            <i class="bi bi-bluetooth me-2"></i>Start Training
        </button>
    }
</div>

@code {
    protected override void OnInitialized()
    {
        CyclingData.PropertyChanged += OnDataChanged;
    }

    private void StartTraining()
    {
        Navigation.NavigateTo("connect-trainer");
    }

    private async void OnDataChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        CyclingData.PropertyChanged -= OnDataChanged;
    }
}
