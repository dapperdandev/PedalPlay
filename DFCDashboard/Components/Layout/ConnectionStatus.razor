@inject DFCDashboard.Services.CyclingDataService CyclingData
@inject NavigationManager Navigation
@implements IDisposable

<button class="connection-status @StatusClass" @onclick="HandleClick">
    <i class="bi bi-bluetooth"></i>
</button>

<style>
    .connection-status {
        position: fixed;
        top: 1rem;
        right: 1rem;
        width: 48px;
        height: 48px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
        background: rgba(0, 0, 0, 0.3);
    }

    .connection-status i {
        font-size: 1.75rem;
        color: white;
        opacity: 0.8;
    }

    .status-connecting {
        background: rgba(13, 202, 240, 0.3);
        animation: pulse 2s infinite;
    }

    .status-connecting i {
        animation: pulse 2s infinite;
        opacity: 1;
        color: #0dcaf0;
    }

    .status-connected {
        background: rgba(40, 167, 69, 0.3);
    }

    .status-connected i {
        opacity: 1;
        color: #98ff98;
    }

    .status-disconnected {
        background: rgba(128, 128, 128, 0.2);
    }

    .status-disconnected i {
        opacity: 0.6;
    }

    .connection-status:hover {
        transform: scale(1.1);
    }

    .connection-status:hover i {
        opacity: 1;
    }

    @@keyframes pulse {
        0% { opacity: 0.6; }
        50% { opacity: 1; }
        100% { opacity: 0.6; }
    }
</style>

@code {
    private bool isInitializing = true;
    private string StatusClass => GetStatusClass();

    protected override void OnInitialized()
    {
        CyclingData.PropertyChanged += HandleDataChanged;
        
        // After 2 seconds (matching our reconnection delay), consider initialization done
        _ = Task.Run(async () =>
        {
            await Task.Delay(2000);
            isInitializing = false;
            await InvokeAsync(StateHasChanged);
        });
    }

    private string GetStatusClass()
    {
        if (isInitializing || CyclingData.IsReconnecting)
            return "status-connecting";
        if (CyclingData.IsConnected)
            return "status-connected";
        return "status-disconnected";
    }

    private void HandleClick()
    {
        Navigation.NavigateTo("connect-trainer");
    }

    private async void HandleDataChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        CyclingData.PropertyChanged -= HandleDataChanged;
    }
}
